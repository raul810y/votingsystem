<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                template="/WEB-INF/templates/polymer.xhtml">
    <ui:define name="head">
        <link href="../resources/forgePKCS7.html" rel="import"/>
    </ui:define>
    <ui:define name="content">
        <div style="margin: 50px;">
            <div class="vertical layout center">
                <div>
                    <div><b>document.cookie:</b><div id="documentCookie"></div></div>
                    <div><b>Session ID:</b><div id="sessionDiv"></div></div>
                </div>
            </div>

            <div id="qrCodeImgDiv" class="vertical layout center center-justified">
                <div style="margin: 25px 0 0 0;font-size: 1.2em; "><b>${msg.accessLbl}</b></div>
                <img id="qrImg"  src="" alt="read it with your mobile" style="border: 1px solid #ccc;"/>
                <div id="websocketSessionDiv" style="text-transform: uppercase;font-size: 1.4em;font-weight: bold;"></div>
            </div>
        </div>


        <script>
            //<![CDATA[
                vs.rsaUtil = new RSAUtil();

                var INIT_REMOTE_SIGNED_SESSION         = 0;
                var INIT_BROWSER_AUTHENTICATED_SESSION = 1;
                var QR_MESSAGE_INFO                    = 2;
                var CURRENCY_SEND                      = 3;

                var WEB_SOCKET_SESSION_KEY = "wsid";
                var DEVICE_ID_KEY          = "did";
                var OPERATION_KEY          = "op";
                var OPERATION_CODE_KEY     = "opid";
                var PUBLIC_KEY_KEY         = "pk";

                vs.getQRCodeURL = function(operation, operationCode, deviceId, sessionId, key) {
                    var result = "${contextURL}/qr?cht=qr&chs=150x150&chl="
                    if(operation != null) result = result + OPERATION_KEY + "=" + operation + ";"
                    if(operationCode != null) result = result + OPERATION_CODE_KEY + "=" + operationCode + ";"
                    if(deviceId != null) result = result + DEVICE_ID_KEY + "=" + deviceId + ";"
                    if(sessionId != null) result = result + WEB_SOCKET_SESSION_KEY + "=" + sessionId + ";"
                    if(key != null) result = result + PUBLIC_KEY_KEY + "=" + key + ";"
                    return result;
                }

                var JSESSIONID =  getCookie("JSESSIONID")

                document.addEventListener('WebComponentsReady', function() {
                    console.log("polymer.xhtml - WebComponentsReady")
                });

                document.querySelector("#documentCookie").innerHTML=document.cookie;
                document.querySelector("#sessionDiv").innerHTML = JSESSIONID

                function getCookie(name) {
                    var value = "; " + document.cookie;
                    var parts = value.split("; " + name + "=");
                    if (parts.length == 2) result = parts.pop().split(";").shift();
                    return result.split(".")[0];
                }

                var websocket
                if ('WebSocket' in window) {
                    websocket = new WebSocket("${webSocketURL}");
                } else {
                    alert('WebSocket is not supported by this browser.');
                }
                websocket.onopen = function () {
                    console.log('Info: WebSocket connection opened.');
                };

                websocket.onmessage = function (event) {
                    console.log('Received: ' + event.data);
                    var messageJSON = toJSON(event.data)
                    if("MESSAGEVS_FROM_VS" ===  messageJSON.operation) {
                        messageJSON.operation = messageJSON.messageType
                        switch(messageJSON.operation) {
                            case "INIT_SESSION":
                                vs.wsSessionId = messageJSON.sessionId
                                websocket.send(JSON.stringify({operation:"INIT_BROWSER_SESSION"}))
                                break;
                            case "INIT_BROWSER_SESSION":
                                if(ResponseVS.SC_OK == messageJSON.statusCode) {
                                    vs.wsDeviceId = messageJSON.deviceId
                                    var operationCode = vs.operationCode()
                                    vs.qrOperationsMap[operationCode] = {operation:'INIT_REMOTE_SIGNED_SESSION'}
                                    document.querySelector("#qrImg").setAttribute("src", vs.getQRCodeURL(
                                            INIT_REMOTE_SIGNED_SESSION, operationCode, vs.wsDeviceId, null,
                                            vs.rsaUtil.publicKeyBase64))
                                    document.querySelector("#websocketSessionDiv").innerHTML = operationCode;
                                }
                                break;
                            default:
                                if(messageJSON.statusCode === ResponseVS.SC_WS_CONNECTION_NOT_FOUND) {
                                    alert(messageJSON.message, "${msg.errorLbl}")
                                }
                        }

                    } else {
                        vs.rsaUtil.decryptSocketMsg(messageJSON)
                        console.log("decryptedSocketMsg: ")
                        console.log(messageJSON)
                        switch(messageJSON.operation) {
                            case "QR_MESSAGE_INFO":
                                var qrOperation = vs.qrOperationsMap[messageJSON.operationCode]
                                var socketMessageDto = {"operation":"MSG_TO_DEVICE_BY_TARGET_DEVICE_ID",
                                    statusCode:700,
                                    deviceToId:messageJSON.deviceFromId,
                                    deviceId: vs.wsDeviceId, UUID:messageJSON.UUID}
                                socketMessageDto.encryptedMessage = vs.encryptToCMS(
                                        messageJSON.x509CertificatePEM, qrOperation)
                                console.log(socketMessageDto)
                                websocket.send(JSON.stringify(socketMessageDto))
                                break;
                            case 'INIT_REMOTE_SIGNED_SESSION':
                                var qrOperation = vs.qrOperationsMap[messageJSON.operationCode]
                                if(qrOperation.operation !== 'INIT_REMOTE_SIGNED_SESSION') {
                                    throw new Error('INIT_REMOTE_SIGNED_SESSION - qrOperation ERROR');
                                }
                                var socketMessageDto = {"operation":"MSG_TO_DEVICE_BY_TARGET_DEVICE_ID",
                                    statusCode:700,
                                    deviceToId:messageJSON.deviceFromId,
                                    deviceId: vs.wsDeviceId}
                                var userDataFromCert = vs.extractUserInfoFromCert(messageJSON.x509CertificatePEM)
                                var csr = vs.rsaUtil.getCSR(userDataFromCert)
                                var remoteSignedSessionDto = {csr:csr, deviceId:vs.wsDeviceId, sessionId:vs.wsSessionId}
                                var encryptedDto = {operation:'INIT_REMOTE_SIGNED_SESSION',
                                    operationCode:messageJSON.operationCode,
                                    sessionId: vs.wsSessionId, deviceFromId: vs.wsDeviceId,
                                    message:JSON.stringify(remoteSignedSessionDto),
                                    uuid:messageJSON.uuid}
                                socketMessageDto.encryptedMessage = vs.encryptToCMS(
                                        messageJSON.x509CertificatePEM, encryptedDto)
                                console.log("INIT_REMOTE_SIGNED_SESSION response: ")
                                console.log(socketMessageDto)
                                websocket.send(JSON.stringify(socketMessageDto))
                                //delete vs.qrOperationsMap[messageJSON.operationCode];
                                break;
                        }
                    }
                };
                websocket.onclose = function (event) {
                    console.log('Info: WebSocket connection closed, Code: ' + event.code +
                            (event.reason == "" ? "" : ", Reason: " + event.reason));
                };
            //]]>
        </script>
    </ui:define>
</ui:composition>
