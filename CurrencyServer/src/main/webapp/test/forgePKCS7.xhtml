<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                template="/WEB-INF/templates/polymer.xhtml">
    <ui:define name="head">
        <script type="text/javascript" src="../resources/bower_components/forge/js/util.js"></script>
        <script type="text/javascript" src="../resources/bower_components/forge/js/oids.js"></script>
        <script type="text/javascript" src="../resources/bower_components/forge/js/asn1.js"></script>
        <script type="text/javascript" src="../resources/bower_components/forge/js/pki.js"></script>
        <script type="text/javascript" src="../resources/bower_components/forge/js/sha256.js"></script>
        <script type="text/javascript" src="../resources/bower_components/forge/js/pkcs1.js"></script>
        <script type="text/javascript" src="../resources/bower_components/forge/js/sha1.js"></script>
        <script type="text/javascript" src="../resources/bower_components/forge/js/jsbn.js"></script>
        <script type="text/javascript" src="../resources/bower_components/forge/js/rsa.js"></script>
        <script type="text/javascript" src="../resources/bower_components/forge/js/x509.js"></script>
        <script type="text/javascript" src="../resources/bower_components/forge/js/cipher.js"></script>
        <script type="text/javascript" src="../resources/bower_components/forge/js/cipherModes.js"></script>
        <script type="text/javascript" src="../resources/bower_components/forge/js/aes.js"></script>
        <script type="text/javascript" src="../resources/bower_components/forge/js/prng.js"></script>
        <script type="text/javascript" src="../resources/bower_components/forge/js/random.js"></script>
        <script type="text/javascript" src="../resources/bower_components/forge/js/pkcs7.js"></script>
        <script type="text/javascript" src="../resources/bower_components/forge/js/pem.js"></script>
        <script type="text/javascript" src="../resources/bower_components/forge/js/forge.js" rel="import"/>

        <script type="text/javascript" src="./ForgeUtils.js"></script>

        <style></style>
    </ui:define>
    <ui:define name="content">
        <script>
            <!-- missing RFC 3161 Time Stamp Requests -->

            var pkcs7PEMForge = '-----BEGIN PKCS7-----\r\n' +
                    'MIICTgYJKoZIhvcNAQcDoIICPzCCAjsCAQAxggHGMIIBwgIBADCBqTCBmzELMAkG\r\n' +
                    'A1UEBhMCREUxEjAQBgNVBAgMCUZyYW5jb25pYTEQMA4GA1UEBwwHQW5zYmFjaDEV\r\n' +
                    'MBMGA1UECgwMU3RlZmFuIFNpZWdsMRIwEAYDVQQLDAlHZWllcmxlaW4xFjAUBgNV\r\n' +
                    'BAMMDUdlaWVybGVpbiBERVYxIzAhBgkqhkiG9w0BCQEWFHN0ZXNpZUBicm9rZW5w\r\n' +
                    'aXBlLmRlAgkA1FQcQNg14vMwDQYJKoZIhvcNAQEBBQAEggEAJhWQz5SniCd1w3A8\r\n' +
                    'uKVZEfc8Tp21I7FMfFqou+UOVsZCq7kcEa9uv2DIj3o7zD8wbLK1fuyFi4SJxTwx\r\n' +
                    'kR0a6V4bbonIpXPPJ1f615dc4LydAi2tv5w14LJ1Js5XCgGVnkAmQHDaW3EHXB7X\r\n' +
                    'T4w9PR3+tcS/5YAnWaM6Es38zCKHd7TnHpuakplIkwSK9rBFAyA1g/IyTPI+ktrE\r\n' +
                    'EHcVuJcz/7eTlF6wJEa2HL8F1TVWuL0p/0GsJP/8y0MYGdCdtr+TIVo//3YGhoBl\r\n' +
                    'N4tnheFT/jRAzfCZtflDdgAukW24CekrJ1sG2M42p5cKQ5rGFQtzNy/n8EjtUutO\r\n' +
                    'HD5YITBsBgkqhkiG9w0BBwEwHQYJYIZIAWUDBAEqBBBmlpfy3WrYj3uWW7+xNEiH\r\n' +
                    'gEAm2mfSF5xFPLEqqFkvKTM4w8PfhnF0ehmfQNApvoWQRQanNWLCT+Q9GHx6DCFj\r\n' +
                    'TUHl+53x88BrCl1E7FhYPs92\r\n' +
                    '-----END PKCS7-----\r\n';

            var pkcs7PEMBC = "-----BEGIN PKCS7-----\n" +
                    "MIAGCSqGSIb3DQEHAqCAMIACAQExDzANBglghkgBZQMEAgEFADCABgkqhkiG9w0B\n" +
                    "BwEAAKCAMIICzzCCAjigAwIBAgIIUkGI3crYt/owDQYJKoZIhvcNAQEFBQAwWTES\n" +
                    "MBAGA1UEBRMJMDg4ODg4ODhEMSIwIAYDVQQEExlUZXN0cy1Wb3RpbmdTeXN0ZW1T\n" +
                    "dXJuYW1lMR8wHQYDVQQqExZUZXN0cy1Wb3RpbmdTeXN0ZW1OYW1lMB4XDTE2MDMw\n" +
                    "NjExNTA0M1oXDTE3MDMwNjExNTA0M1owTDERMA8GA1UEBRMINzU1MzE3MkgxGjAY\n" +
                    "BgNVBAQMEWxhc3ROYW1lXzc1NTMxNzJIMRswGQYDVQQqDBJGaXJzdE5hbWVfNzU1\n" +
                    "MzE3MkgwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAJg48T40KaX1hSPhWS6g\n" +
                    "mN97GGJ//HoI26ls2GFY6na2b0/PAyUBiL6cbyrAxWqgbUX/heub5wI6fb4nZYjk\n" +
                    "mPXlTEV5h9a8ApE90lvjubz1cwlYu3qprCxukjrIWlAogndp/tNpwnHOiuEbxb54\n" +
                    "WRCA+Ws5fPTNNq/OUBGNF5M1AgMBAAGjgawwgakwagYDVR0jBGMwYYAUAzyinHiC\n" +
                    "aUTvEiUc3FGWviaysPmhP6Q9MDsxEjAQBgNVBAUTCTUwMDAwMDAwUjElMCMGA1UE\n" +
                    "AxMcVm90aW5nIFN5c3RlbSBBY2Nlc3MgQ29udHJvbIIIVvvH5hBx5lYwHQYDVR0O\n" +
                    "BBYEFFBB1Ad31KCEh/u+CbeMVLcTp6F1MAwGA1UdEwEB/wQCMAAwDgYDVR0PAQH/\n" +
                    "BAQDAgWgMA0GCSqGSIb3DQEBBQUAA4GBAEBTY4kT+YoIbWG00gM+bi8ITDV1lZ7b\n" +
                    "Rfa0MzotsqzplD12IbbzULWHW092I0MAoIG9mdM+BDweZCsH/bRVWwyQ5V3DaU3C\n" +
                    "3mVuHRuU2beju5w4CMOffn21504Ypm8WAbOZugS9byN5vO5ybDI6qOWk4z9ipmoI\n" +
                    "IRgUGSp/Iy8MAAAxggF6MIIBdgIBATBlMFkxEjAQBgNVBAUTCTA4ODg4ODg4RDEi\n" +
                    "MCAGA1UEBBMZVGVzdHMtVm90aW5nU3lzdGVtU3VybmFtZTEfMB0GA1UEKhMWVGVz\n" +
                    "dHMtVm90aW5nU3lzdGVtTmFtZQIIUkGI3crYt/owDQYJYIZIAWUDBAIBBQCgaTAY\n" +
                    "BgkqhkiG9w0BCQMxCwYJKoZIhvcNAQcBMBwGCSqGSIb3DQEJBTEPFw0xNjAzMDYx\n" +
                    "MTUwNDNaMC8GCSqGSIb3DQEJBDEiBCDAU15L4ref/ZMpEwVDa/iJMU5KP67AXs/8\n" +
                    "u33zGtnlGjANBgkqhkiG9w0BAQEFAASBgCAbErISb3bYqYelPnjcmF5XxyfIeyzD\n" +
                    "aepQrj5TbRbJMkUg3+2xjvP/pmmK1OwJ1r2qolFPndX7mGX1UX4T8eMr5SHZQ14m\n" +
                    "7IMnhUyvHkwnO13Uv6SCiXWk5TMteWnLZgsY16yG3Wha3tpgtt5fbN37oNwnznTs\n" +
                    "gsidFvZ1o7cfAAAAAAAA\n" +
                    "-----END PKCS7-----";


            //ERROR, this doesn' work!!!
            function readPKCS7Message() {
                var p7 = forge.pkcs7.messageFromPem(pkcs7PEMForge);
                console.log(p7)
            }

            function createPKCS7Message() {
                var p7 = forge.pkcs7.createSignedData();
                p7.content = forge.util.createBuffer('Some content to be signed.', 'utf8');
                var certPrivateKeyPair = getSelfSignedCert();
                var cert = certPrivateKeyPair.cert;
                console.log(cert)
                p7.addCertificate(cert);
                p7.addSigner({
                    key: certPrivateKeyPair.privateKey,
                    certificate: cert,
                    digestAlgorithm: forge.pki.oids.sha256,
                    authenticatedAttributes: [{
                        type: forge.pki.oids.contentType,
                        value: forge.pki.oids.data
                    }, {
                        type: forge.pki.oids.messageDigest
                        // value will be auto-populated at signing time
                    }, {
                        type: forge.pki.oids.signingTime,
                        // value can also be auto-populated at signing time
                        value: new Date()
                    }]
                });
                p7.sign();
                console.log(p7)
                var pem = forge.pkcs7.messageToPem(p7);
                console.log(pem)
            }

            function getSelfSignedCert() {
                // generate a keypair and create an X.509v3 certificate
                var keys = forge.pki.rsa.generateKeyPair(1024);
                var cert = forge.pki.createCertificate();
                cert.publicKey = keys.publicKey;
// alternatively set public key from a csr
//cert.publicKey = csr.publicKey;
                cert.serialNumber = '01';
                cert.validity.notBefore = new Date();
                cert.validity.notAfter = new Date();
                cert.validity.notAfter.setFullYear(cert.validity.notBefore.getFullYear() + 1);
                var attrs = [{
                    name: 'commonName',
                    value: 'example.org'
                }, {
                    name: 'countryName',
                    value: 'US'
                }, {
                    shortName: 'ST',
                    value: 'Virginia'
                }, {
                    name: 'localityName',
                    value: 'Blacksburg'
                }, {
                    name: 'organizationName',
                    value: 'Test'
                }, {
                    shortName: 'OU',
                    value: 'Test'
                }];
                cert.setSubject(attrs);
                // alternatively set subject from a csr
                //cert.setSubject(csr.subject.attributes);
                cert.setIssuer(attrs);
                cert.setExtensions([{
                    name: 'basicConstraints',
                    cA: true
                }, {
                    name: 'keyUsage',
                    keyCertSign: true,
                    digitalSignature: true,
                    nonRepudiation: true,
                    keyEncipherment: true,
                    dataEncipherment: true
                }, {
                    name: 'extKeyUsage',
                    serverAuth: true,
                    clientAuth: true,
                    codeSigning: true,
                    emailProtection: true,
                    timeStamping: true
                }, {
                    name: 'nsCertType',
                    client: true,
                    server: true,
                    email: true,
                    objsign: true,
                    sslCA: true,
                    emailCA: true,
                    objCA: true
                }, {
                    name: 'subjectAltName',
                    altNames: [{
                        type: 6, // URI
                        value: 'http://example.org/webid#me'
                    }, {
                        type: 7, // IP
                        ip: '127.0.0.1'
                    }]
                }, {
                    name: 'subjectKeyIdentifier'
                }]);
                /* alternatively set extensions from a csr
                 var extensions = csr.getAttribute({name: 'extensionRequest'}).extensions;
                 // optionally add more extensions
                 extensions.push.apply(extensions, [{
                 name: 'basicConstraints',
                 cA: true
                 }, {
                 name: 'keyUsage',
                 keyCertSign: true,
                 digitalSignature: true,
                 nonRepudiation: true,
                 keyEncipherment: true,
                 dataEncipherment: true
                 }]);
                 cert.setExtensions(extensions);
                 */
                // self-sign certificate
                cert.sign(keys.privateKey);
                return {cert:cert, privateKey:keys.privateKey};
            }

            createPKCS7Message();
        </script>
    </ui:define>
</ui:composition>
