<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                template="/WEB-INF/templates/basic.xhtml">
    <ui:define name="head">
        <meta name="viewport" content="width=device-width, initial-scale=1"/>
        <meta name="mobile-web-app-capable" content="yes"/>
        <meta name="application-name" content="VotingSystem"/>
        <meta name="apple-mobile-web-app-capable" content="yes" />
        <link rel="shortcut icon" type="image/png" href="./resources/images/icon_16/fa-money.png" />
        <title><ui:insert name="title" /></title>
        <link href="./resources/bower_components/font-awesome/css/font-awesome.min.css" media="all" rel="stylesheet" />
        <link href="./resources/css/currency.css" media="all" rel="stylesheet" />
        <script src="./resources/bower_components/webcomponentsjs/webcomponents-lite.js"></script>
        <link href="./resources/bower_components/polymer/polymer.html" rel="import"/>
        <link rel="import" href="./resources/bower_components/iron-flex-layout/classes/iron-flex-layout.html"/>
        <script src="./resources/js/utils.js" type="text/javascript"></script>
        <script src="./resources/js/utils_js.vsp" type="text/javascript"></script>
        <link href="./resources/d3.html" rel="import"/>
        <link rel="import" href="./element/access-dialog.vsp"/>
        <link rel="import" href="./resources/routing.xhtml"/>
        <link rel="import" href="./resources/forgePKCS7.html"/>
    </ui:define>
    <ui:define name="content">
        <div id="drawer" style="display: none;">
            <div style="background-color: #ba0011; color: #f9f9f9;">
                <div id="pageTitle" class="app-name" style="padding: 8px 0 8px 15px;font-size: 1.8em; font-weight: bold;"></div>
            </div>
            <div class="vertical layout flex" style="background-color: #fefefe;">
                <a class="menuItem menuItemSelected" data-route="transactionsDashboard" href="#{contextURL}/spa.xhtml#!/transactionsDashboard">
                    <i class="fa fa-tachometer" style="margin:0px 10px 0px 0px;"></i> ${msg.dashBoardLbl}
                </a>
                <a class="menuItem menuItemSelected" data-route="user" href="#{contextURL}/spa.xhtml#!/user/search">
                    <i class="fa fa-user" style="margin:0px 10px 0px 0px;"></i> ${msg.locateUserLbl}
                </a>
                <a class="menuItem menuItemSelected isSuperUserView" data-route="newBank" href="#{contextURL}/spa.xhtml#!/innerVSPage?url=/user/newBank.xhtml&amp;caption=${msg.newBankLbl}&amp;data_route=newBank">
                    <i class="fa fa-university" style="margin:0px 10px 0px 0px;"></i> ${msg.newBankLbl}
                </a>
                <a class="menuItem menuItemSelected isSuperUserView" data-route="x509Certificate" href="#{contextURL}/spa.xhtml#!/x509Certificate/certs">
                    <i class="fa fa-users" style="margin:0px 10px 0px 0px;"></i> ${msg.locateCertLbl}
                </a>
                <a class="menuItem menuItemSelected clientToolConnected" data-route="tools" href="#{contextURL}/spa.xhtml#!/app/tools">
                    <i class="fa fa-cogs" style="margin:0px 10px 0px 0px;"></i> ${msg.toolsLbl}
                </a>
                <a class="menuItem menuItemSelected" data-route="reports" href="#{contextURL}/spa.xhtml#!/reports">
                    <i class="fa fa-list-alt" style="margin:0px 10px 0px 0px;"></i> ${msg.reportsPageTitle}
                </a>
                <a class="menuItem menuItemSelected" data-route="docs" href="#{contextURL}/spa.xhtml#!/innerVSPage?url=/app/index.xhtml&amp;caption=${msg.docsLbl}&amp;data_route=docs">
                    <i class="fa fa-info" style="margin:0px 10px 0px 0px;"></i> ${msg.docsLbl}
                </a>
                <a class="menuItem menuItemSelected" data-route="contact" href="#{contextURL}/spa.xhtml#!/app/contact">
                    <i class="fa fa-phone" style="margin:0px 10px 0px 0px;"></i> ${msg.contactLbl}
                </a>
            </div>
        </div>
        <div id='main'>
            <div class="horizontal layout" style="background-color: #ba0011;padding: 1px 0 1px 0;">
                <div class="horizontal layout flex">
                    <div style="margin:0 30px 0 30px;">
                        <i id="drawerButton" class="fa fa-navicon navbarIcon" style="font-size: 1.7em; margin:3px 0 0 0;"></i>
                    </div>
                    <div style="font-size: 1.7em;margin:0 0 0 50px; color: #f9f9f9;" id="selectedPageTitle"></div>
                </div>
                <div id="connectionMsgDiv" class="navbarIcon" style="font-size: 1.2em;margin:3px 30px 0 0;">
                    #{msg.accessLbl}
                </div>
            </div>

            <p id="pageInfoPanel" class="text-center" style="margin: 20px auto 20px auto; font-size: 1.3em;
                        background-color: #f9f9f9; max-width: 1000px; padding: 10px; display: none;"></p>

            <div id="mainContent" class="mainContent"></div>

            <access-dialog id="accessDialog"></access-dialog>
        </div>
        <script>
            //<![CDATA[
            //debugger;  this is to allow logging from extension content scripts
            window.addEventListener('WebComponentsReady', function() {
                vs.back = function() {
                    history.back()
                    //there's a delay until location.href is updated with history.back()
                    setTimeout(function () {
                        page(window.location.href.split("\\#!")[1])
                    }, 50);
                }

                document.querySelector("#drawerButton").addEventListener('click', function (event) {
                    d3.select("#drawer").style({display:'block'});
                }, true);

                document.body.addEventListener('click', function (event) {
                    d3.select("#drawer").style({display:'none'});
                }, true);

                document.querySelector("#connectionMsgDiv").addEventListener('click', function (event) {
                    if(!vs.rsaUtil.x509Certificate) {
                        var operationCode = vs.operationCode()
                        vs.qrOperationsMap[operationCode] = {operation:'INIT_REMOTE_SIGNED_SESSION'}
                        document.querySelector("#accessDialog").show(operationCode, vs.getQRCodeURL(
                                INIT_REMOTE_SIGNED_SESSION, operationCode, vs.wsId, null,
                                vs.rsaUtil.publicKeyBase64, "200x200"))
                    } else {
                        alert("#{msg.quitConfirmMsg}", "#{msg.messageLbl}", function() {
                            var socketMessageDto = {operation:"CLOSE_SESSION", uuid:vs.getUUID()}
                            function signCallback(cmsSignedMessage) {
                                socketMessageDto.cmsMessagePEM = forge.pkcs7.messageToPem(cmsSignedMessage);
                                vs.websocket.send(JSON.stringify(socketMessageDto))
                            }
                            vs.rsaUtil.sign(JSON.stringify(socketMessageDto), signCallback)
                        })
                    }
                });

                vs.updateMenuView = function() {
                    var appTitle = "${msg.appTitle}"
                    d3.selectAll(".isAdminView").style("display", "none")
                    d3.selectAll(".isSuperUserView").style("display", "none")
                    if('admin' === menuType) {
                        d3.select(".isAdminView").style("display", "block")
                        appTitle = "${msg.adminPageTitle}"
                    } else if('superuser' === menuType) {
                        d3.select(".isSuperUserView").style("display", "block")
                        appTitle = "${msg.superUserTitle}"
                    }
                    d3.select("#pageTitle").text(appTitle)
                }

                vs.loadMainContent = function(newContentNode, caption, searchVisible) {
                    if(caption) sendSignalVS({caption:caption})
                    var mainContentNode = document.getElementById("mainContent")
                    if(mainContentNode.childNodes[0]) mainContentNode.removeChild(mainContentNode.childNodes[0])
                    mainContentNode.appendChild(newContentNode)
                    newContentNode.addEventListener('click', function (event) {
                        d3.select("#drawer").style({display:'none'});
                    })
                    if('admin' === menuType) caption = caption + ' - ${msg.adminLbl}'
                    if('superuser' === menuType) caption = caption + ' - ${msg.superUserLbl}'
                    if(searchVisible === true) d3.select("#searchDiv").style("display", "block")
                    else d3.select("#searchDiv").style("display", "none")
                    d3.selectAll("#drawer .menuItem").each( function(d) {
                        if(d3.select(this).attr("data-route") === vs.route){
                            d3.select(this).classed("menuItemSelected", true)
                        } else d3.select(this).classed("menuItemSelected", false)
                    })
                }

                vs.updateSearchMessage = function(searchMessage) {
                    if(searchMessage) {
                        document.querySelector("#pageInfoPanel").innerHTML = searchMessage
                        document.querySelector("#pageInfoPanel").style.display = "block"
                    } else document.querySelector("#pageInfoPanel").style.display = "none"
                }

                vs.scrollPageToTop = function() {
                    document.getElementById('mainContent').scrollTop = 0;
                };

                document.querySelector('#voting_system_page').addEventListener('search-request', function (e) {
                    console.log("spa.xhtml - search request - query:" + e.detail.query);
                })

                document.querySelector("#voting_system_page").addEventListener('user-clicked', function(e) {
                    console.log("spa.xhtml - user-clicked")
                    page.show(vs.contextURL + "/rest/user/id/" + e.detail.id + "?connectedDevices=true")
                })
                vs.updateMenuView()
                initWebsocket()
            })

            var INIT_REMOTE_SIGNED_SESSION         = 0;
            var QR_MESSAGE_INFO                    = 1;
            var CURRENCY_SEND                      = 2;

            var WEB_SOCKET_SESSION_KEY = "wsid";
            var DEVICE_ID_KEY          = "did";
            var OPERATION_KEY          = "op";
            var OPERATION_CODE_KEY     = "opid";
            var PUBLIC_KEY_KEY         = "pk";

            function initWebsocket() {
                var websocket
                if ('WebSocket' in window) {
                    websocket = new WebSocket("${webSocketURL}");
                } else {
                    alert('WebSocket is not supported by this browser.');
                }
                websocket.onopen = function () {
                    console.log('Info: WebSocket connection opened.');
                };
                websocket.onmessage = function (event) {
                    console.log('Received: ' + event.data);
                    var messageJSON = toJSON(event.data)
                    if("MESSAGEVS_FROM_VS" ===  messageJSON.operation) {
                        messageJSON.operation = messageJSON.messageType
                        switch(messageJSON.operation) {
                            case "INIT_SESSION":
                                vs.wsSessionId = messageJSON.sessionId
                                websocket.send(JSON.stringify({operation:"INIT_BROWSER_SESSION"}))
                                setTimeout( function() {
                                    vs.rsaUtil = new RSAUtil();
                                }, 1000 );
                                break;
                            case "INIT_BROWSER_SESSION":
                                if(ResponseVS.SC_OK == messageJSON.statusCode) {
                                    vs.wsId = messageJSON.message
                                }
                                break;
                            case 'INIT_REMOTE_SIGNED_SESSION':
                                if(ResponseVS.SC_WS_CONNECTION_INIT_OK == messageJSON.statusCode) {
                                    vs.connectedDevice = messageJSON.connectedDevice
                                    vs.mobileDevice = toJSON(messageJSON.message)
                                    console.log("mobileDevice: ")
                                    console.log(vs.mobileDevice)
                                    console.log("connectedDevice: ")
                                    console.log(vs.connectedDevice)
                                    vs.rsaUtil.initCSR(vs.connectedDevice.x509CertificatePEM)
                                    document.querySelector("#connectionMsgDiv").innerHTML = '#{msg.quitLbl}'
                                    document.querySelector("#accessDialog").close()
                                }
                                break;
                            default:
                                if(messageJSON.statusCode === ResponseVS.SC_WS_CONNECTION_NOT_FOUND) {
                                    alert(messageJSON.message, "${msg.errorLbl}")
                                }
                        }

                    } else {
                        vs.rsaUtil.decryptSocketMsg(messageJSON)
                        console.log("decryptedSocketMsg: ")
                        console.log(messageJSON)
                        switch(messageJSON.operation) {
                            case "QR_MESSAGE_INFO":
                                var qrOperation = vs.qrOperationsMap[messageJSON.operationCode]
                                var socketMessageDto = {"operation":"MSG_TO_DEVICE_BY_TARGET_DEVICE_ID",
                                    statusCode:700,
                                    deviceToId:messageJSON.deviceFromId,
                                    deviceId: vs.wsId, UUID:messageJSON.UUID}
                                socketMessageDto.encryptedMessage = vs.encryptToCMS(
                                        messageJSON.x509CertificatePEM, qrOperation)
                                console.log(socketMessageDto)
                                websocket.send(JSON.stringify(socketMessageDto))
                                break;
                            case 'INIT_REMOTE_SIGNED_SESSION':
                                var qrOperation = vs.qrOperationsMap[messageJSON.operationCode]
                                if(qrOperation.operation !== 'INIT_REMOTE_SIGNED_SESSION') {
                                    throw new Error('INIT_REMOTE_SIGNED_SESSION - qrOperation ERROR');
                                }
                                var socketMessageDto = {"operation":"MSG_TO_DEVICE_BY_TARGET_DEVICE_ID",
                                    statusCode:700,
                                    deviceToId:messageJSON.deviceFromId,
                                    deviceId: vs.wsId}
                                var userDataFromCert = vs.extractUserInfoFromCert(messageJSON.x509CertificatePEM)
                                var csr = vs.rsaUtil.getCSR(userDataFromCert)
                                var remoteSignedSessionDto = {csr:csr, deviceId:vs.wsId, sessionId:vs.wsSessionId}
                                var encryptedDto = {operation:'INIT_REMOTE_SIGNED_SESSION',
                                    operationCode:messageJSON.operationCode,
                                    sessionId: vs.wsSessionId, deviceFromId: vs.wsId,
                                    message:JSON.stringify(remoteSignedSessionDto),
                                    uuid:messageJSON.uuid}
                                socketMessageDto.encryptedMessage = vs.encryptToCMS(
                                        messageJSON.x509CertificatePEM, encryptedDto)
                                console.log("INIT_REMOTE_SIGNED_SESSION response: ")
                                console.log(socketMessageDto)
                                websocket.send(JSON.stringify(socketMessageDto))
                                //delete vs.qrOperationsMap[messageJSON.operationCode];
                                break;
                        }
                    }
                };
                websocket.onclose = function (event) {
                    console.log('Info: WebSocket connection closed, Code: ' + event.code +
                            (event.reason == "" ? "" : ", Reason: " + event.reason));
                    vs.rsaUtil = null
                    document.querySelector("#connectionMsgDiv").innerHTML = '#{msg.accessLbl}'
                    initWebsocket()
                };
                vs.websocket = websocket
            }
            //]]>
        </script>
    </ui:define>
</ui:composition>