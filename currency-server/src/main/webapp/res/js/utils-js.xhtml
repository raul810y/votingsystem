<ui:composition
        xmlns="http://www.w3.org/1999/xhtml"
        xmlns:ui="http://xmlns.jcp.org/jsf/facelets">
    <script>
        //<![CDATA[
        var vs = {}

        vs.entityId = "${pageBean.getEntityId()}"
        vs.timeStampServiceURL = "${pageBean.getTimestampServiceURL()}"

        //http://jsfiddle.net/cckSj/5/
        Date.prototype.getElapsedTime = function() {
            // time difference in ms
            var timeDiff = this - new Date();

            if(timeDiff <= 0) {
                return "${msg.timeFinishedLbl}"
            }

            // strip the miliseconds
            timeDiff /= 1000;

            // get seconds
            var seconds = Math.round(timeDiff % 60);

            // remove seconds from the date
            timeDiff = Math.floor(timeDiff / 60);

            // get minutes
            var minutes = Math.round(timeDiff % 60);

            // remove minutes from the date
            timeDiff = Math.floor(timeDiff / 60);

            // get hours
            var hours = Math.round(timeDiff % 24);

            // remove hours from the date
            timeDiff = Math.floor(timeDiff / 24);

            // the rest of timeDiff is number of days
            var resultStr
            var days = timeDiff;
            if(days > 0) {
                resultStr = days + " " + "${msg.daysLbl}" + " " + "${msg.andLbl}" + " " + hours + " " + "${msg.hoursLbl}"
            } else if (hours > 0) {
                resultStr = hours + " " + "${msg.hoursLbl}" + " " + "${msg.andLbl}" + " " + minutes + " " + "${msg.minutesLbl}"
            } else if (minutes > 0) {
                resultStr = minutes + " " + "${msg.minutesLbl}" + " " + "${msg.andLbl}" + " " + seconds + " " + "${msg.secondsLbl}"
            }
            return resultStr
        };

        var transactionsMap = {
            CURRENCY_REQUEST:{lbl:"${msg.selectCurrencyRequestLbl}"},
            CURRENCY_SEND:{lbl:"${msg.selectCurrencySendLbl}"},
            FROM_BANK:{lbl:"${msg.bankInputLbl}"},
            FROM_USER:{lbl:"${msg.transactionFromUser}"}
        }

        vs.getCurrencySymbol = function(currencyCode) {
            switch (currencyCode) {
                case "EUR": return '€';
                case "USD": return '$';
                case "CNY":
                case "JPY":
                    return '¥';
            }
        }

        vs.httpGet = function(url, callback, requestHeader, headersMap) {
            if(!requestHeader) requestHeader = "application/json"
            var xhr = new XMLHttpRequest()
            xhr.onreadystatechange = function() {
                if (this.readyState == 4 && this.status == 200) {
                    callback(this.responseText)
                }
            };
            xhr.open("GET", url, true);
            xhr.setRequestHeader("Content-Type", requestHeader);
            if(headersMap) {
                Object.keys(headersMap).forEach(function(headerKey) {
                    xhr.setRequestHeader(headerKey, headersMap[headerKey]);
                });
            }
            xhr.send();
        }

        vs.httpPost = function(url, callback, request, contentType, headersMap) {
            if(typeof request !== 'string') request = JSON.stringify(request)
            if(!contentType)
                contentType = "application/json";
            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function() {
                if (this.readyState == 4) {
                    if(403 === this.status) {
                        vs.alert("${msg.errorLbl}", "${msg.sessionExpiredMsg}");
                        vs.sessionClosed();
                    } else callback(this.responseText, this.status);
                }
            };
            xhr.open("POST", url, true);
            xhr.setRequestHeader("Content-Type", contentType);
            if(headersMap) {
                Object.keys(headersMap).forEach(function(headerKey) {
                    xhr.setRequestHeader(headerKey, headersMap[headerKey]);
                });
            }
            console.log("vs.httpPost - " + url + " - " + contentType)
            xhr.send(request);
        }

        vs.weekdays = [${msg.weekdaysShort}];
        vs.months = [${msg.monthsShort}];

        Date.prototype.getDayWeekFormat = function() {
            var currentDate = new Date()
            if(currentDate.getFullYear() === this.getFullYear()) {
                return vs.weekdays[this.getDay()] + " " + this.getDate() + " " + vs.months[ this.getMonth()];
            } else return this.getDate() + " " + vs.months[ this.getMonth()] + " " + this.getFullYear();
        };

        Date.prototype.getDayWeekAndHourFormat = function() {
            return this.getDayWeekFormat() + " " + pad(this.getHours(), 2) + ":" + pad(this.getMinutes(), 2);
        };

        Number.prototype.getDayWeekFormat = function() {
            return new Date(this).getDayWeekFormat()
        };

        Number.prototype.getDayWeekAndHourFormat = function() {
            return new Date(this).getDayWeekAndHourFormat()
        };
        //]]>
    </script>
</ui:composition>


